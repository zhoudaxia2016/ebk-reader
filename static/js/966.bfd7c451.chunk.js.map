{"version":3,"file":"static/js/966.bfd7c451.chunk.js","mappings":"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","sources":["foliate-js/tts.js"],"sourcesContent":["const NS = {\n    XML: 'http://www.w3.org/XML/1998/namespace',\n    SSML: 'http://www.w3.org/2001/10/synthesis',\n}\n\nconst blockTags = new Set([\n    'article', 'aside', 'audio', 'blockquote', 'caption',\n    'details', 'dialog', 'div', 'dl', 'dt', 'dd',\n    'figure', 'footer', 'form', 'figcaption',\n    'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li',\n    'main', 'math', 'nav', 'ol', 'p', 'pre', 'section', 'tr',\n])\n\nconst getLang = el => {\n    const x = el.lang || el?.getAttributeNS?.(NS.XML, 'lang')\n    return x ? x : el.parentElement ? getLang(el.parentElement) : null\n}\n\nconst getAlphabet = el => {\n    const x = el?.getAttributeNS?.(NS.XML, 'lang')\n    return x ? x : el.parentElement ? getAlphabet(el.parentElement) : null\n}\n\nconst getSegmenter = (lang = 'en', granularity = 'word') => {\n    const segmenter = new Intl.Segmenter(lang, { granularity })\n    const granularityIsWord = granularity === 'word'\n    return function* (strs, makeRange) {\n        const str = strs.join('')\n        let name = 0\n        let strIndex = -1\n        let sum = 0\n        for (const { index, segment, isWordLike } of segmenter.segment(str)) {\n            if (granularityIsWord && !isWordLike) continue\n            while (sum <= index) sum += strs[++strIndex].length\n            const startIndex = strIndex\n            const startOffset = index - (sum - strs[strIndex].length)\n            const end = index + segment.length\n            if (end < str.length) while (sum <= end) sum += strs[++strIndex].length\n            const endIndex = strIndex\n            const endOffset = end - (sum - strs[strIndex].length)\n            yield [(name++).toString(),\n                makeRange(startIndex, startOffset, endIndex, endOffset)]\n        }\n    }\n}\n\nconst fragmentToSSML = (fragment, inherited) => {\n    const ssml = document.implementation.createDocument(NS.SSML, 'speak')\n    const { lang } = inherited\n    if (lang) ssml.documentElement.setAttributeNS(NS.XML, 'lang', lang)\n\n    const convert = (node, parent, inheritedAlphabet) => {\n        if (!node) return\n        if (node.nodeType === 3) return ssml.createTextNode(node.textContent)\n        if (node.nodeType === 4) return ssml.createCDATASection(node.textContent)\n        if (node.nodeType !== 1) return\n\n        let el\n        const nodeName = node.nodeName.toLowerCase()\n        if (nodeName === 'foliate-mark') {\n            el = ssml.createElementNS(NS.SSML, 'mark')\n            el.setAttribute('name', node.dataset.name)\n        }\n        else if (nodeName === 'br')\n            el = ssml.createElementNS(NS.SSML, 'break')\n        else if (nodeName === 'em' || nodeName === 'strong')\n            el = ssml.createElementNS(NS.SSML, 'emphasis')\n\n        const lang = node.lang || node.getAttributeNS(NS.XML, 'lang')\n        if (lang) {\n            if (!el) el = ssml.createElementNS(NS.SSML, 'lang')\n            el.setAttributeNS(NS.XML, 'lang', lang)\n        }\n\n        const alphabet = node.getAttributeNS(NS.SSML, 'alphabet') || inheritedAlphabet\n        if (!el) {\n            const ph = node.getAttributeNS(NS.SSML, 'ph')\n            if (ph) {\n                el = ssml.createElementNS(NS.SSML, 'phoneme')\n                if (alphabet) el.setAttribute('alphabet', alphabet)\n                el.setAttribute('ph', ph)\n            }\n        }\n\n        if (!el) el = parent\n\n        let child = node.firstChild\n        while (child) {\n            const childEl = convert(child, el, alphabet)\n            if (childEl && el !== childEl) el.append(childEl)\n            child = child.nextSibling\n        }\n        return el\n    }\n    convert(fragment.firstChild, ssml.documentElement, inherited.alphabet)\n    return ssml\n}\n\nconst getFragmentWithMarks = (range, textWalker, granularity) => {\n    const lang = getLang(range.commonAncestorContainer)\n    const alphabet = getAlphabet(range.commonAncestorContainer)\n\n    const segmenter = getSegmenter(lang, granularity)\n    const fragment = range.cloneContents()\n\n    // we need ranges on both the original document (for highlighting)\n    // and the document fragment (for inserting marks)\n    // so unfortunately need to do it twice, as you can't copy the ranges\n    const entries = [...textWalker(range, segmenter)]\n    const fragmentEntries = [...textWalker(fragment, segmenter)]\n\n    for (const [name, range] of fragmentEntries) {\n        const mark = document.createElement('foliate-mark')\n        mark.dataset.name = name\n        range.insertNode(mark)\n    }\n    const ssml = fragmentToSSML(fragment, { lang, alphabet })\n    return { entries, ssml }\n}\n\nconst rangeIsEmpty = range => !range.toString().trim()\n\nfunction* getBlocks(doc) {\n    let last\n    const walker = doc.createTreeWalker(doc.body, NodeFilter.SHOW_ELEMENT)\n    for (let node = walker.nextNode(); node; node = walker.nextNode()) {\n        const name = node.tagName.toLowerCase()\n        if (blockTags.has(name)) {\n            if (last) {\n                last.setEndBefore(node)\n                if (!rangeIsEmpty(last)) yield last\n            }\n            last = doc.createRange()\n            last.setStart(node, 0)\n        }\n    }\n    if (!last) {\n        last = doc.createRange()\n        last.setStart(doc.body.firstChild ?? doc.body, 0)\n    }\n    last.setEndAfter(doc.body.lastChild ?? doc.body)\n    if (!rangeIsEmpty(last)) yield last\n}\n\nclass ListIterator {\n    #arr = []\n    #iter\n    #index = -1\n    #f\n    constructor(iter, f = x => x) {\n        this.#iter = iter\n        this.#f = f\n    }\n    current() {\n        if (this.#arr[this.#index]) return this.#f(this.#arr[this.#index])\n    }\n    first() {\n        const newIndex = 0\n        if (this.#arr[newIndex]) {\n            this.#index = newIndex\n            return this.#f(this.#arr[newIndex])\n        }\n    }\n    prev() {\n        const newIndex = this.#index - 1\n        if (this.#arr[newIndex]) {\n            this.#index = newIndex\n            return this.#f(this.#arr[newIndex])\n        }\n    }\n    next() {\n        const newIndex = this.#index + 1\n        if (this.#arr[newIndex]) {\n            this.#index = newIndex\n            return this.#f(this.#arr[newIndex])\n        }\n        while (true) {\n            const { done, value } = this.#iter.next()\n            if (done) break\n            this.#arr.push(value)\n            if (this.#arr[newIndex]) {\n                this.#index = newIndex\n                return this.#f(this.#arr[newIndex])\n            }\n        }\n    }\n    find(f) {\n        const index = this.#arr.findIndex(x => f(x))\n        if (index > -1) {\n            this.#index = index\n            return this.#f(this.#arr[index])\n        }\n        while (true) {\n            const { done, value } = this.#iter.next()\n            if (done) break\n            this.#arr.push(value)\n            if (f(value)) {\n                this.#index = this.#arr.length - 1\n                return this.#f(value)\n            }\n        }\n    }\n}\n\nexport class TTS {\n    #list\n    #ranges\n    #lastMark\n    #serializer = new XMLSerializer()\n    constructor(doc, textWalker, highlight) {\n        this.doc = doc\n        this.highlight = highlight\n        this.#list = new ListIterator(getBlocks(doc), range => {\n            const { entries, ssml } = getFragmentWithMarks(range, textWalker)\n            this.#ranges = new Map(entries)\n            return [ssml, range]\n        })\n    }\n    #getMarkElement(doc, mark) {\n        if (!mark) return null\n        return doc.querySelector(`mark[name=\"${CSS.escape(mark)}\"`)\n    }\n    #speak(doc, getNode) {\n        if (!doc) return\n        if (!getNode) return this.#serializer.serializeToString(doc)\n        const ssml = document.implementation.createDocument(NS.SSML, 'speak')\n        ssml.documentElement.replaceWith(ssml.importNode(doc.documentElement, true))\n        let node = getNode(ssml)?.previousSibling\n        while (node) {\n            const next = node.previousSibling ?? node.parentNode?.previousSibling\n            node.parentNode.removeChild(node)\n            node = next\n        }\n        return this.#serializer.serializeToString(ssml)\n    }\n    start() {\n        this.#lastMark = null\n        const [doc] = this.#list.first() ?? []\n        if (!doc) return this.next()\n        return this.#speak(doc, ssml => this.#getMarkElement(ssml, this.#lastMark))\n    }\n    resume() {\n        const [doc] = this.#list.current() ?? []\n        if (!doc) return this.next()\n        return this.#speak(doc, ssml => this.#getMarkElement(ssml, this.#lastMark))\n    }\n    prev(paused) {\n        this.#lastMark = null\n        const [doc, range] = this.#list.prev() ?? []\n        if (paused && range) this.highlight(range.cloneRange())\n        return this.#speak(doc)\n    }\n    next(paused) {\n        this.#lastMark = null\n        const [doc, range] = this.#list.next() ?? []\n        if (paused && range) this.highlight(range.cloneRange())\n        return this.#speak(doc)\n    }\n    from(range) {\n        this.#lastMark = null\n        const [doc] = this.#list.find(range_ =>\n            range.compareBoundaryPoints(Range.END_TO_START, range_) <= 0)\n        let mark\n        for (const [name, range_] of this.#ranges.entries())\n            if (range.compareBoundaryPoints(Range.START_TO_START, range_) <= 0) {\n                mark = name\n                break\n            }\n        return this.#speak(doc, ssml => this.#getMarkElement(ssml, mark))\n    }\n    setMark(mark) {\n        const range = this.#ranges.get(mark)\n        if (range) {\n            this.#lastMark = mark\n            this.highlight(range.cloneRange())\n        }\n    }\n}\n"],"names":["NS","blockTags","Set","getLang","el","_el$getAttributeNS","x","lang","getAttributeNS","call","parentElement","getAlphabet","_el$getAttributeNS2","getFragmentWithMarks","range","textWalker","granularity","commonAncestorContainer","alphabet","segmenter","arguments","length","undefined","Intl","Segmenter","granularityIsWord","strs","makeRange","str","join","name","strIndex","sum","index","segment","isWordLike","startIndex","startOffset","end","endIndex","endOffset","toString","getSegmenter","fragment","cloneContents","entries","fragmentEntries","mark","document","createElement","dataset","insertNode","ssml","fragmentToSSML","inherited","implementation","createDocument","documentElement","setAttributeNS","convert","node","parent","inheritedAlphabet","nodeType","createTextNode","textContent","createCDATASection","nodeName","toLowerCase","createElementNS","setAttribute","ph","child","firstChild","childEl","append","nextSibling","rangeIsEmpty","trim","_arr","_classPrivateFieldLooseKey","_iter","_index","_f","ListIterator","constructor","iter","f","Object","defineProperty","writable","value","_classPrivateFieldLooseBase","this","current","first","prev","newIndex","next","done","push","find","findIndex","_list","_ranges","_lastMark","_serializer","_getMarkElement","_speak","TTS","doc","highlight","_speak2","_getMarkElement2","XMLSerializer","_doc$body$lastChild","last","walker","createTreeWalker","body","NodeFilter","SHOW_ELEMENT","nextNode","tagName","has","setEndBefore","createRange","setStart","_doc$body$firstChild","setEndAfter","lastChild","getBlocks","Map","start","_classPrivateFieldLoo","resume","_classPrivateFieldLoo2","paused","_classPrivateFieldLoo3","cloneRange","_classPrivateFieldLoo4","from","range_","compareBoundaryPoints","Range","END_TO_START","START_TO_START","setMark","get","querySelector","concat","CSS","escape","getNode","_getNode","serializeToString","replaceWith","importNode","previousSibling","_node$previousSibling","_node$parentNode","parentNode","removeChild"],"sourceRoot":""}