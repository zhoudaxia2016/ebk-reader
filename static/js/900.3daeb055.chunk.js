"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[900],{1900:n=>{n.exports='(identifier) @variable\n\n(property_identifier) @variable.member\n\n(shorthand_property_identifier) @variable.member\n\n(private_property_identifier) @variable.member\n\n(variable_declarator\n  name:\n    (object_pattern\n      (shorthand_property_identifier_pattern))) @variable\n\n((identifier) @variable.builtin\n  (#any-of? @variable.builtin "arguments" "module" "console" "window" "document"))\n\n((identifier) @type.builtin\n  (#any-of? @type.builtin "Object" "Function" "Boolean" "Symbol" "Number" "Math" "Date" "String" "RegExp" "Map" "Set" "WeakMap" "WeakSet" "Promise" "Array" "Int8Array" "Uint8Array" "Uint8ClampedArray" "Int16Array" "Uint16Array" "Int32Array" "Uint32Array" "Float32Array" "Float64Array" "ArrayBuffer" "DataView" "Error" "EvalError" "InternalError" "RangeError" "ReferenceError" "SyntaxError" "TypeError" "URIError"))\n\n; Function and method definitions\n;--------------------------------\n(function_expression\n  name: (identifier) @function)\n\n(function_declaration\n  name: (identifier) @function)\n\n(generator_function\n  name: (identifier) @function)\n\n(generator_function_declaration\n  name: (identifier) @function)\n\n(method_definition\n  name:\n    [\n      (property_identifier)\n      (private_property_identifier)\n    ] @function.method)\n\n(method_definition\n  name: (property_identifier) @constructor\n  (#eq? @constructor "constructor"))\n\n(pair\n  key: (property_identifier) @function.method\n  value: (function_expression))\n\n(pair\n  key: (property_identifier) @function.method\n  value: (arrow_function))\n\n(assignment_expression\n  left:\n    (member_expression\n      property: (property_identifier) @function.method)\n  right: (arrow_function))\n\n(assignment_expression\n  left:\n    (member_expression\n      property: (property_identifier) @function.method)\n  right: (function_expression))\n\n(variable_declarator\n  name: (identifier) @function\n  value: (arrow_function))\n\n(variable_declarator\n  name: (identifier) @function\n  value: (function_expression))\n\n(assignment_expression\n  left: (identifier) @function\n  right: (arrow_function))\n\n(assignment_expression\n  left: (identifier) @function\n  right: (function_expression))\n\n; Function and method calls\n;--------------------------\n(call_expression\n  function: (identifier) @function.call)\n\n(call_expression\n  function:\n    (member_expression\n      property:\n        [\n          (property_identifier)\n          (private_property_identifier)\n        ] @function.method.call))\n\n; Builtins\n;---------\n((identifier) @module.builtin\n  (#eq? @module.builtin "Intl"))\n\n((identifier) @function.builtin\n  (#any-of? @function.builtin "eval" "isFinite" "isNaN" "parseFloat" "parseInt" "decodeURI" "decodeURIComponent" "encodeURI" "encodeURIComponent" "require"))\n\n; Constructor\n;------------\n(new_expression\n  constructor: (identifier) @constructor)\n\n; Variables\n;----------\n(namespace_import\n  (identifier) @module)\n\n; Decorators\n;----------\n(decorator\n  "@" @attribute\n  (identifier) @attribute)\n\n(decorator\n  "@" @attribute\n  (call_expression\n    (identifier) @attribute))\n\n; Literals\n;---------\n[\n  (this)\n  (super)\n] @variable.builtin\n\n((identifier) @variable.builtin\n  (#eq? @variable.builtin "self"))\n\n[\n  (true)\n  (false)\n] @boolean\n\n[\n  (null)\n  (undefined)\n] @constant.builtin\n\n[\n  (comment)\n  (html_comment)\n] @comment @spell\n\n(hash_bang_line) @keyword.directive\n\n((string_fragment) @keyword.directive\n  (#eq? @keyword.directive "use strict"))\n\n(string) @string\n\n(template_string) @string\n\n(escape_sequence) @string.escape\n\n(regex_pattern) @string.regexp\n\n(regex_flags) @character.special\n\n(regex\n  "/" @punctuation.bracket) ; Regex delimiters\n\n(number) @number\n\n((identifier) @number\n  (#any-of? @number "NaN" "Infinity"))\n\n; Punctuation\n;------------\n";" @punctuation.delimiter\n\n"." @punctuation.delimiter\n\n"," @punctuation.delimiter\n\n(pair\n  ":" @punctuation.delimiter)\n\n(pair_pattern\n  ":" @punctuation.delimiter)\n\n(switch_case\n  ":" @punctuation.delimiter)\n\n(switch_default\n  ":" @punctuation.delimiter)\n\n[\n  "--"\n  "-"\n  "-="\n  "&&"\n  "+"\n  "++"\n  "+="\n  "&="\n  "/="\n  "**="\n  "<<="\n  "<"\n  "<="\n  "<<"\n  "="\n  "=="\n  "==="\n  "!="\n  "!=="\n  "=>"\n  ">"\n  ">="\n  ">>"\n  "||"\n  "%"\n  "%="\n  "*"\n  "**"\n  ">>>"\n  "&"\n  "|"\n  "^"\n  "??"\n  "*="\n  ">>="\n  ">>>="\n  "^="\n  "|="\n  "&&="\n  "||="\n  "??="\n  "..."\n] @operator\n\n(binary_expression\n  "/" @operator)\n\n(ternary_expression\n  [\n    "?"\n    ":"\n  ] @keyword.conditional.ternary)\n\n(unary_expression\n  [\n    "!"\n    "~"\n    "-"\n    "+"\n  ] @operator)\n\n(unary_expression\n  [\n    "delete"\n    "void"\n  ] @keyword.operator)\n\n[\n  "("\n  ")"\n  "["\n  "]"\n  "{"\n  "}"\n] @punctuation.bracket\n\n(template_substitution\n  [\n    "${"\n    "}"\n  ] @punctuation.special) @none\n\n; Keywords\n;----------\n[\n  "if"\n  "else"\n  "switch"\n  "case"\n] @keyword.conditional\n\n[\n  "import"\n  "from"\n] @keyword.import\n\n(export_specifier\n  "as" @keyword.import)\n\n(import_specifier\n  "as" @keyword.import)\n\n(namespace_export\n  "as" @keyword.import)\n\n(namespace_import\n  "as" @keyword.import)\n\n[\n  "for"\n  "of"\n  "do"\n  "while"\n  "continue"\n] @keyword.repeat\n\n[\n  "break"\n  "class"\n  "const"\n  "debugger"\n  "export"\n  "extends"\n  "get"\n  "let"\n  "set"\n  "static"\n  "target"\n  "var"\n  "with"\n] @keyword\n\n[\n  "async"\n  "await"\n] @keyword.coroutine\n\n[\n  "return"\n  "yield"\n] @keyword.return\n\n"function" @keyword.function\n\n[\n  "new"\n  "delete"\n  "in"\n  "instanceof"\n  "typeof"\n] @keyword.operator\n\n[\n  "throw"\n  "try"\n  "catch"\n  "finally"\n] @keyword.exception\n\n(export_statement\n  "default" @keyword)\n\n(switch_default\n  "default" @keyword.conditional)\n'}}]);