"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[204],{4204:n=>{n.exports='; From tree-sitter-python licensed under MIT License\n; Copyright (c) 2016 Max Brunsfeld\n; Variables\n(identifier) @variable\n\n; Reset highlighting in f-string interpolations\n(interpolation) @none\n\n; Identifier naming conventions\n((identifier) @type\n  (#lua-match? @type "^[A-Z].*[a-z]"))\n\n((identifier) @constant\n  (#lua-match? @constant "^[A-Z][A-Z_0-9]*$"))\n\n((identifier) @constant.builtin\n  (#lua-match? @constant.builtin "^__[a-zA-Z0-9_]*__$"))\n\n((identifier) @constant.builtin\n  ; format-ignore\n  (#any-of? @constant.builtin \n    ; https://docs.python.org/3/library/constants.html\n    "NotImplemented" "Ellipsis" \n    "quit" "exit" "copyright" "credits" "license"))\n\n"_" @constant.builtin ; match wildcard\n\n((attribute\n  attribute: (identifier) @variable.member)\n  (#lua-match? @variable.member "^[%l_].*$"))\n\n((assignment\n  left: (identifier) @type.definition\n  (type\n    (identifier) @_annotation))\n  (#eq? @_annotation "TypeAlias"))\n\n((assignment\n  left: (identifier) @type.definition\n  right:\n    (call\n      function: (identifier) @_func))\n  (#any-of? @_func "TypeVar" "NewType"))\n\n; Function calls\n(call\n  function: (identifier) @function.call)\n\n(call\n  function:\n    (attribute\n      attribute: (identifier) @function.method.call))\n\n((call\n  function: (identifier) @constructor)\n  (#lua-match? @constructor "^%u"))\n\n((call\n  function:\n    (attribute\n      attribute: (identifier) @constructor))\n  (#lua-match? @constructor "^%u"))\n\n; Decorators\n((decorator\n  "@" @attribute)\n  (#set! "priority" 101))\n\n(decorator\n  (identifier) @attribute)\n\n(decorator\n  (attribute\n    attribute: (identifier) @attribute))\n\n(decorator\n  (call\n    (identifier) @attribute))\n\n(decorator\n  (call\n    (attribute\n      attribute: (identifier) @attribute)))\n\n((decorator\n  (identifier) @attribute.builtin)\n  (#any-of? @attribute.builtin "classmethod" "property"))\n\n; Builtin functions\n((call\n  function: (identifier) @function.builtin)\n  (#any-of? @function.builtin "abs" "all" "any" "ascii" "bin" "bool" "breakpoint" "bytearray" "bytes" "callable" "chr" "classmethod" "compile" "complex" "delattr" "dict" "dir" "divmod" "enumerate" "eval" "exec" "filter" "float" "format" "frozenset" "getattr" "globals" "hasattr" "hash" "help" "hex" "id" "input" "int" "isinstance" "issubclass" "iter" "len" "list" "locals" "map" "max" "memoryview" "min" "next" "object" "oct" "open" "ord" "pow" "print" "property" "range" "repr" "reversed" "round" "set" "setattr" "slice" "sorted" "staticmethod" "str" "sum" "super" "tuple" "type" "vars" "zip" "__import__"))\n\n; Function definitions\n(function_definition\n  name: (identifier) @function)\n\n(type\n  (identifier) @type)\n\n(type\n  (subscript\n    (identifier) @type)) ; type subscript: Tuple[int]\n\n((call\n  function: (identifier) @_isinstance\n  arguments:\n    (argument_list\n      (_)\n      (identifier) @type))\n  (#eq? @_isinstance "isinstance"))\n\n; Normal parameters\n(parameters\n  (identifier) @variable.parameter)\n\n; Lambda parameters\n(lambda_parameters\n  (identifier) @variable.parameter)\n\n(lambda_parameters\n  (tuple_pattern\n    (identifier) @variable.parameter))\n\n; Default parameters\n(keyword_argument\n  name: (identifier) @variable.parameter)\n\n; Naming parameters on call-site\n(default_parameter\n  name: (identifier) @variable.parameter)\n\n(typed_parameter\n  (identifier) @variable.parameter)\n\n(typed_default_parameter\n  name: (identifier) @variable.parameter)\n\n; Variadic parameters *args, **kwargs\n(parameters\n  (list_splat_pattern ; *args\n    (identifier) @variable.parameter))\n\n(parameters\n  (dictionary_splat_pattern ; **kwargs\n    (identifier) @variable.parameter))\n\n; Typed variadic parameters\n(parameters\n  (typed_parameter\n    (list_splat_pattern ; *args: type\n      (identifier) @variable.parameter)))\n\n(parameters\n  (typed_parameter\n    (dictionary_splat_pattern ; *kwargs: type\n      (identifier) @variable.parameter)))\n\n; Lambda parameters\n(lambda_parameters\n  (list_splat_pattern\n    (identifier) @variable.parameter))\n\n(lambda_parameters\n  (dictionary_splat_pattern\n    (identifier) @variable.parameter))\n\n; Literals\n(none) @constant.builtin\n\n[\n  (true)\n  (false)\n] @boolean\n\n((identifier) @variable.builtin\n  (#eq? @variable.builtin "self"))\n\n((identifier) @variable.builtin\n  (#eq? @variable.builtin "cls"))\n\n(integer) @number\n\n(float) @number.float\n\n(comment) @comment @spell\n\n((module\n  .\n  (comment) @keyword.directive)\n  (#lua-match? @keyword.directive "^#!/"))\n\n(string) @string\n\n[\n  (escape_sequence)\n  (escape_interpolation)\n] @string.escape\n\n; doc-strings\n(module\n  .\n  (comment)*\n  .\n  (expression_statement\n    (string) @string.documentation @spell))\n\n(class_definition\n  body:\n    (block\n      .\n      (expression_statement\n        (string) @string.documentation @spell)))\n\n(function_definition\n  body:\n    (block\n      .\n      (expression_statement\n        (string) @string.documentation @spell)))\n\n; Tokens\n[\n  "-"\n  "-="\n  ":="\n  "!="\n  "*"\n  "**"\n  "**="\n  "*="\n  "/"\n  "//"\n  "//="\n  "/="\n  "&"\n  "&="\n  "%"\n  "%="\n  "^"\n  "^="\n  "+"\n  "+="\n  "<"\n  "<<"\n  "<<="\n  "<="\n  "<>"\n  "="\n  "=="\n  ">"\n  ">="\n  ">>"\n  ">>="\n  "@"\n  "@="\n  "|"\n  "|="\n  "~"\n  "->"\n] @operator\n\n; Keywords\n[\n  "and"\n  "in"\n  "is"\n  "not"\n  "or"\n  "is not"\n  "not in"\n  "del"\n] @keyword.operator\n\n[\n  "def"\n  "lambda"\n] @keyword.function\n\n[\n  "assert"\n  "class"\n  "exec"\n  "global"\n  "nonlocal"\n  "pass"\n  "print"\n  "with"\n  "as"\n  "type"\n] @keyword\n\n[\n  "async"\n  "await"\n] @keyword.coroutine\n\n[\n  "return"\n  "yield"\n] @keyword.return\n\n(yield\n  "from" @keyword.return)\n\n(future_import_statement\n  "from" @keyword.import\n  "__future__" @constant.builtin)\n\n(import_from_statement\n  "from" @keyword.import)\n\n"import" @keyword.import\n\n(aliased_import\n  "as" @keyword.import)\n\n[\n  "if"\n  "elif"\n  "else"\n  "match"\n  "case"\n] @keyword.conditional\n\n[\n  "for"\n  "while"\n  "break"\n  "continue"\n] @keyword.repeat\n\n[\n  "try"\n  "except"\n  "except*"\n  "raise"\n  "finally"\n] @keyword.exception\n\n(raise_statement\n  "from" @keyword.exception)\n\n(try_statement\n  (else_clause\n    "else" @keyword.exception))\n\n[\n  "("\n  ")"\n  "["\n  "]"\n  "{"\n  "}"\n] @punctuation.bracket\n\n(interpolation\n  "{" @punctuation.special\n  "}" @punctuation.special)\n\n(type_conversion) @function.macro\n\n[\n  ","\n  "."\n  ":"\n  ";"\n  (ellipsis)\n] @punctuation.delimiter\n\n; Class definitions\n(class_definition\n  name: (identifier) @type)\n\n(class_definition\n  body:\n    (block\n      (function_definition\n        name: (identifier) @function.method)))\n\n(class_definition\n  superclasses:\n    (argument_list\n      (identifier) @type))\n\n((class_definition\n  body:\n    (block\n      (expression_statement\n        (assignment\n          left: (identifier) @variable.member))))\n  (#lua-match? @variable.member "^[%l_].*$"))\n\n((class_definition\n  body:\n    (block\n      (expression_statement\n        (assignment\n          left:\n            (_\n              (identifier) @variable.member)))))\n  (#lua-match? @variable.member "^[%l_].*$"))\n\n((class_definition\n  (block\n    (function_definition\n      name: (identifier) @constructor)))\n  (#any-of? @constructor "__new__" "__init__"))\n\n((identifier) @type.builtin\n  ; format-ignore\n  (#any-of? @type.builtin\n    ; https://docs.python.org/3/library/exceptions.html\n    "BaseException" "Exception" "ArithmeticError" "BufferError" "LookupError" "AssertionError" "AttributeError"\n    "EOFError" "FloatingPointError" "GeneratorExit" "ImportError" "ModuleNotFoundError" "IndexError" "KeyError"\n    "KeyboardInterrupt" "MemoryError" "NameError" "NotImplementedError" "OSError" "OverflowError" "RecursionError"\n    "ReferenceError" "RuntimeError" "StopIteration" "StopAsyncIteration" "SyntaxError" "IndentationError" "TabError"\n    "SystemError" "SystemExit" "TypeError" "UnboundLocalError" "UnicodeError" "UnicodeEncodeError" "UnicodeDecodeError"\n    "UnicodeTranslateError" "ValueError" "ZeroDivisionError" "EnvironmentError" "IOError" "WindowsError"\n    "BlockingIOError" "ChildProcessError" "ConnectionError" "BrokenPipeError" "ConnectionAbortedError"\n    "ConnectionRefusedError" "ConnectionResetError" "FileExistsError" "FileNotFoundError" "InterruptedError"\n    "IsADirectoryError" "NotADirectoryError" "PermissionError" "ProcessLookupError" "TimeoutError" "Warning"\n    "UserWarning" "DeprecationWarning" "PendingDeprecationWarning" "SyntaxWarning" "RuntimeWarning"\n    "FutureWarning" "ImportWarning" "UnicodeWarning" "BytesWarning" "ResourceWarning"\n    ; https://docs.python.org/3/library/stdtypes.html\n    "bool" "int" "float" "complex" "list" "tuple" "range" "str"\n    "bytes" "bytearray" "memoryview" "set" "frozenset" "dict" "type" "object"))\n\n; Regex from the `re` module\n(call\n  function:\n    (attribute\n      object: (identifier) @_re)\n  arguments:\n    (argument_list\n      .\n      (string\n        (string_content) @string.regexp))\n  (#eq? @_re "re"))\n\n'}}]);