{"version":3,"file":"static/js/941.4a8d9365.chunk.js","mappings":"6HAAA,MAAMA,EAAsBC,GAAOA,EAAMA,EACpCC,QAAQ,gBAAiB,KACzBA,QAAQ,gBAAiB,IACzBA,QAAQ,gBAAiB,IAAM,GAC9BC,EAAiBC,GAAMJ,EAAsB,OAAFI,QAAE,IAAFA,OAAE,EAAFA,EAAIC,aAE/CC,EAAK,CACPC,MAAO,+BACPC,KAAM,gCAGJC,EACG,kBADHA,EAEK,wBAGLC,EAAQ,CACV,OAAU,CAAC,SAAU,QACrB,SAAY,CAAC,KAAM,QACnB,MAAS,CAAC,OAAQ,QAClB,EAAK,SACL,cAAiB,CAAC,IAAK,QACvB,IAAO,CAAC,MAAO,QACf,IAAO,CAAC,MAAO,QACf,KAAQ,CAAC,OAAQ,QACjB,MAAS,SASPC,EAAO,CACT,SAAY,CAAC,cACb,SAAY,CAAC,KAAMD,GACnB,cAAe,CAAC,IAAKA,GACrB,KAAQ,CAAC,IAAKA,GACd,OAAU,UAGRE,EAAU,CACZ,MAAS,CAAC,SAAU,CAChB,EAAK,CAAC,KAAMF,GACZ,aAAc,CAAC,QAEnB,SAAY,CAAC,aAAc,QAC3B,MAAS,QACT,WAAc,CAAC,SACf,QAAW,CAAC,UAAW,QACvB,EAAK,CAAC,IAAKA,GACX,KAAQ,CAAC,aAAcC,GACvB,SAAY,CAAC,KAAMD,GACnB,KAAQ,CAAC,aAAc,QACvB,aAAc,CAAC,MACf,MAAS,CAAC,QA5BA,CACV,GAAM,CAAC,KAAM,CAAC,UACd,GAAM,CAAC,KAAM,CAAC,UAAW,UAAW,QAAS,WAC7C,GAAM,CAAC,KAAM,CAAC,UAAW,UAAW,QAAS,aA0B7C,cAAe,CAAC,IAAKA,IAEzBC,EAAe,SAAEE,KAAKD,GAEtB,MAAME,EAAO,CACT,MAAS,QACT,MAAS,CAAC,UAAW,CACjB,EAAK,CAAC,KAAMJ,GACZ,aAAc,CAAC,QAEnB,SAAY,CAAC,UAAWE,GACxB,QAAW,CAAC,UAAWA,IAGrBG,EAAcX,IAChB,MAAMY,EAAOZ,EAAGa,eAAeX,EAAGC,MAAO,SAClC,CAAEW,GAAMF,EAAKG,MAAM,KACpBC,EAAMhB,EAAGiB,cAAcC,eAAeJ,GAC5C,OAAOE,EAAG,QAAAG,OACIH,EAAII,aAAa,gBAAe,YAAAD,OAAWH,EAAIf,aACvDW,CAAI,EAGd,MAAMS,EACFC,WAAAA,CAAYC,GACRC,KAAKD,IAAMA,EACXC,KAAKC,IAAMC,SAASC,eAAeC,eAAe1B,EAAG2B,MAAO,OAChE,CACAC,KAAAA,CAAMC,GACF,MAAM/B,EAAKwB,KAAKC,IAAIO,cAAc,OAIlC,OAHAhC,EAAGiC,IAAMF,EAAKX,aAAa,OAC3BpB,EAAGkC,MAAQH,EAAKX,aAAa,SAC7BpB,EAAGmC,aAAa,MAAOxB,EAAYoB,IAC5B/B,CACX,CACAoC,MAAAA,CAAOL,GACH,MAAM/B,EAAKwB,KAAKa,QAAQN,EAAM,CAAE,EAAK,CAAC,IAAKzB,KAI3C,OAHAN,EAAGmC,aAAa,OAAQJ,EAAKlB,eAAeX,EAAGC,MAAO,SACpB,SAA9B4B,EAAKX,aAAa,SAClBpB,EAAGsC,eAAepC,EAAGE,KAAM,YAAa,WACrCJ,CACX,CACAuC,MAAAA,CAAOR,GACH,MAAM/B,EAAKwB,KAAKa,QAAQN,EAAM,CAC1B,OAAU,CAAC,IAAK,CACZ,MAAS,CAAC,SAAU,CAChB,EAAK,CAAC,SAAUzB,GAChB,aAAc,CAAC,QAEnB,SAAY,CAAC,IAAKA,OAG1B,IAAK,MAAMkC,KAAST,EAAKU,SAAiC,MAAnBD,EAAME,WACzC1C,EAAG2C,OAAOnB,KAAKC,IAAImB,eAAeJ,EAAMvC,cACxCD,EAAG2C,OAAOnB,KAAKC,IAAIO,cAAc,QAErC,OAAOhC,CACX,CACAqC,OAAAA,CAAQN,EAAMc,GAEV,GAAsB,IAAlBd,EAAKe,SAAgB,OAAOtB,KAAKC,IAAImB,eAAeb,EAAK9B,aAC7D,GAAsB,IAAlB8B,EAAKe,SAAgB,OAAOtB,KAAKC,IAAIsB,mBAAmBhB,EAAK9B,aACjE,GAAsB,IAAlB8B,EAAKe,SAAgB,OAAOtB,KAAKC,IAAIuB,cAAcjB,EAAK9B,aAE5D,MAAMgD,EAAO,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAMd,EAAKW,UACrB,IAAKO,EAAG,OAAO,KACf,GAAiB,kBAANA,EAAgB,OAAOzB,KAAKyB,GAAGlB,GAE1C,MAAOmB,EAAMC,GAAQF,EACfjD,EAAKwB,KAAKC,IAAIO,cAAckB,GAOlC,GAJInB,EAAKjB,KAAId,EAAGc,GAAKiB,EAAKjB,IAC1Bd,EAAGoD,UAAUC,IAAItB,EAAKW,UAGlBY,MAAMC,QAAQJ,GAAO,IAAK,MAAMK,KAAQL,EACxCnD,EAAGmC,aAAaqB,EAAMzB,EAAKX,aAAaoC,IAG5C,MAAMC,EAAoB,SAATN,EAAkBN,EAAMS,MAAMC,QAAQJ,GAAQ,KAAOA,EACtE,IAAIX,EAAQT,EAAK2B,WACjB,KAAOlB,GAAO,CACV,MAAMmB,EAAUnC,KAAKa,QAAQG,EAAOiB,GAChCE,GAAS3D,EAAG2C,OAAOgB,GACvBnB,EAAQA,EAAMoB,WAClB,CACA,OAAO5D,CACX,EAGJ,MAgBM6D,EAAQC,IAAIC,gBAAgB,IAAIC,KAAK,CAAC,y3BAgDxC,CAAEC,KAAM,cASNC,EAAS,kBAEFC,EAAUC,UACnB,MAAMC,EAAO,CAAC,EACR5C,OA7EO2C,WAAe,IAADE,EAC3B,MAAMC,QAAeC,EAAKC,cACpB5E,EAAM,IAAI6E,YAAY,SAASC,OAAOJ,GACtCK,EAAS,IAAIC,UACbpD,EAAMmD,EAAOE,gBAAgBjF,EAAKQ,GAClC0E,EAAWtD,EAAIuD,cAG4E,QAD7FV,EACGzE,EAAIoF,MAAM,wFAAgF,IAAAX,OAAA,EAA1FA,EAA6F,IACpG,GAAIS,GAAuC,UAA3BA,EAASG,cAA2B,CAChD,MAAMrF,EAAM,IAAI6E,YAAYK,GAAUJ,OAAOJ,GAC7C,OAAOK,EAAOE,gBAAgBjF,EAAKQ,EACvC,CACA,OAAOoB,CAAG,EAgEQ0D,CAASX,GACrBY,EAAY,IAAI/D,EAAaI,GAE7B4D,EAAIC,GAAK7D,EAAI8D,cAAcD,GAC3BE,EAAKF,GAAK,IAAI7D,EAAIgE,iBAAiBH,IACnCI,EAAY1F,IACd,MAAM2F,EAAO5F,EAAeC,EAAGuF,cAAc,aAC7C,GAAII,EAAM,OAAOA,EACjB,MAAMC,EAAQ7F,EAAeC,EAAGuF,cAAc,eACxCM,EAAS9F,EAAeC,EAAGuF,cAAc,gBACzCO,EAAO/F,EAAeC,EAAGuF,cAAc,cAK7C,MAAO,CAAErC,KAJI,CAAC0C,EAAOC,EAAQC,GAAMC,QAAOT,GAAKA,IAAGU,KAAK,KAIxCC,OAHAH,EACT,CAACA,EAAM,CAACF,EAAOC,GAAQE,QAAOT,GAAKA,IAAGU,KAAK,MAAMA,KAAK,MACtD,KACiB,EAErBE,EAAUlG,IAAE,IAAAmG,EAAA,OAA6B,QAA7BA,EAAM,OAAFnG,QAAE,IAAFA,OAAE,EAAFA,EAAIoB,aAAa,gBAAQ,IAAA+E,EAAAA,EAAIpG,EAAeC,EAAG,EAC/DoG,EAAaf,EAAE,yBAgBrB,GAfAhB,EAAKgC,SAAW,CACZnE,MAAOnC,EAAesF,EAAE,0BACxBiB,WAAYvG,EAAesF,EAAE,qBAC7BkB,SAAUxG,EAAesF,EAAE,oBAC3BmB,OAAQhB,EAAG,qBAAqBiB,IAAIf,GACpCgB,WAAYlB,EAAG,yBAAyBiB,IAAIf,GAC5CiB,SAAUnB,EAAG,wBAAwBiB,IAAIf,GACpCvE,OAAOqE,EAAG,8BAA8BiB,IAAI1G,IACjD6G,UAAW7G,EAAesF,EAAE,2BAC5BwB,UAAWX,EAAQb,EAAE,oBACrByB,SAAUZ,EAAQb,EAAE,uBACpB0B,YAAaX,EAAahB,EAAU/C,QAAQ+D,EACxC,CAAEA,WAAY,CAAC,MAAO5F,KAAYwG,UAAY,KAClDC,QAASzB,EAAG,oBAAoBiB,IAAI1G,IAEpCsF,EAAE,mBAAoB,CACtB,MAAM6B,EAAMvG,EAAY0E,EAAE,oBAC1BhB,EAAK8C,SAAW,IAAMC,MAAMF,GAAKG,MAAKC,GAAOA,EAAI9C,QACrD,MAAOH,EAAK8C,SAAW,IAAM,KAG7B,MAAMI,EAAWjE,MAAMkE,KAAK/F,EAAIgE,iBAAiB,SAASgC,IACtD,MAAMC,EAAYtC,EAAU/C,QAAQoF,EAAM,CAAEA,KAAM,CAAC,OAAQ/G,KAC3D,MAAO,CAAC4C,MAAMkE,KAAKE,EAAUjF,UAAUzC,IAEnC,MAAM2H,EAAM,CAAC3H,KAAOA,EAAGyF,iBAAiB,SAASgB,KAAIzG,GAAMA,EAAGc,KAC9D,MAAO,CAAEd,KAAI2H,MAAK,IAClBD,EAAU,IAGZE,EAAO,GACPC,EAAcN,EAAS,GAAG,GAE3Bd,KAAIqB,IAAkB,IAAjB,GAAE9H,EAAE,IAAE2H,GAAKG,EAQb,MAAO,CAAEH,MAAKI,OANCzE,MAAMkE,KACjBxH,EAAGyF,iBAAiB,8BACpB,CAACzF,EAAIgI,KACDhI,EAAGmC,aAAa+B,EAAQ8D,GACjB,CAAE9F,MAAOnC,EAAeC,GAAKgI,YAEtBhI,KAAI,IAG7BmB,OAAOoG,EAASU,MAAM,GAAGxB,KAAIyB,IAAuB,IAArBC,EAAUV,GAAKS,EAC3C,MAAMP,EAAMQ,EAAS1B,KAAI2B,GAAKA,EAAET,MAAKU,OAErC,OADAZ,EAAKrE,UAAUC,IAAI,iBACZ,CAAEsE,MAAK3H,GAAIyH,EAAMa,OAAQ,KAAM,KAEzC7B,KAAI8B,IAAkC,IAADC,EAAAC,EAAA,IAAhC,IAAEd,EAAG,OAAEI,EAAM,GAAE/H,EAAE,OAAEsI,GAAQC,EAC7B,MAAM1I,GAhFD6I,EAgFgB1I,EAAG2I,UAhFf,8GAAAxH,OAEG0C,EAAK,2DAAA1C,OACjBuH,EAAI,qBAHCA,MAiFL,MAAMlE,EAAO,IAAIR,KAAK,CAACnE,GAAM,CAAEoE,KAAM5D,IAC/BuI,EAAM9E,IAAIC,gBAAgBS,GAChCoD,EAAKnH,KAAKmI,GAIV,MAAO,CACHjB,MAAKzF,MAJKtC,EAC2C,QADxB4I,EACW,QADXC,EAC7BzI,EAAGuF,cAAc,+BAAuB,IAAAkD,OAAA,EAAxCA,EAA0CxI,mBAAW,IAAAuI,EAAAA,EACjDxI,EAAGoD,UAAUyF,SAAS,SAAW7I,EAAGC,YAAc,IAE1C8H,SAAQe,KAAMA,IAAMF,EAChChH,eAAgBA,KAAM,IAAIiD,WAAYC,gBAAgBjF,EAAKQ,GAE3D0I,KAAMvE,EAAKuE,KAAOzF,MAAMkE,KAAKxH,EAAGyF,iBAAiB,UAC7CzF,IAAE,IAAAgJ,EAAAC,EAAA,OAAkC,QAAlCD,EAA0B,QAA1BC,EAAIjJ,EAAGoB,aAAa,cAAM,IAAA6H,OAAA,EAAtBA,EAAwBC,cAAM,IAAAF,EAAAA,EAAI,CAAC,IACxCG,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAC7Bf,SACH,IAGHgB,EAAQ,IAAIC,IAiClB,OAhCAlF,EAAK8D,SAAWN,EAAYpB,KAAI,CAAC+C,EAASxB,KACtC,MAAM,IAAEL,EAAG,KAAEmB,EAAI,eAAElH,EAAc,KAAEmH,EAAI,OAAET,GAAWkB,EACpD,IAAK,MAAM1I,KAAM6G,EAAS7G,GAAIwI,EAAMG,IAAI3I,EAAIkH,GAC5C,MAAO,CAAElH,GAAIkH,EAAOc,OAAMlH,iBAAgBmH,OAAMT,SAAQ,IAG5DjE,EAAKqF,IAAM7B,EAAYpB,KAAI,CAAAkD,EAAoB3B,KAAW,IAA9B,MAAE9F,EAAK,OAAE6F,GAAQ4B,EACzC,MAAM7I,EAAKkH,EAAM4B,WACjB,MAAO,CACHC,MAAO3H,EACPtB,KAAME,EACNgJ,SAAgB,OAAN/B,QAAM,IAANA,GAAAA,EAAQmB,OAASnB,EAAOtB,KAAIsD,IAAA,IAAC,MAAE7H,EAAK,MAAE8F,GAAO+B,EAAA,MAAM,CACzDF,MAAO3H,EACPtB,KAAK,GAADO,OAAKL,EAAE,KAAAK,OAAI6G,GAClB,IAAK,KACT,IACFjC,QAAOiE,GAAQA,IAElB3F,EAAK4F,YAAcrJ,IACf,MAAOwI,EAAGC,GAAKzI,EAAKG,MAAM,KAC1B,OAAOqI,EAED,CAAEpB,MAAOkC,OAAOd,GAAIhH,OAAQX,GAAOA,EAAI8D,cAAc,IAADpE,OAAK+C,EAAM,MAAA/C,OAAKkI,EAAC,QAErE,CAAErB,MAAOsB,EAAMa,IAAId,GAAIjH,OAAQX,GAAOA,EAAIP,eAAemI,GAAI,EAEvEhF,EAAK+F,aAAexJ,IAAI,IAAAyJ,EAAAC,EAAA,OAAyC,QAAzCD,EAAQ,OAAJzJ,QAAI,IAAJA,GAAgB,QAAZ0J,EAAJ1J,EAAMG,MAAM,YAAI,IAAAuJ,OAAZ,EAAJA,EAAkB7D,KAAInB,GAAK4E,OAAO5E,YAAG,IAAA+E,EAAAA,EAAI,EAAE,EACvEhG,EAAKkG,eAAiB,CAAC9I,EAAKX,IAAOW,EAAI8D,cAAc,IAADpE,OAAK+C,EAAM,MAAA/C,OAAKL,EAAE,OAEtEuD,EAAKmG,QAAU,KACX,IAAK,MAAM5B,KAAOhB,EAAM9D,IAAI2G,gBAAgB7B,EAAI,EAE7CvE,CAAI,C","sources":["foliate-js/fb2.js"],"sourcesContent":["const normalizeWhitespace = str => str ? str\n    .replace(/[\\t\\n\\f\\r ]+/g, ' ')\n    .replace(/^[\\t\\n\\f\\r ]+/, '')\n    .replace(/[\\t\\n\\f\\r ]+$/, '') : ''\nconst getElementText = el => normalizeWhitespace(el?.textContent)\n\nconst NS = {\n    XLINK: 'http://www.w3.org/1999/xlink',\n    EPUB: 'http://www.idpf.org/2007/ops',\n}\n\nconst MIME = {\n    XML: 'application/xml',\n    XHTML: 'application/xhtml+xml',\n}\n\nconst STYLE = {\n    'strong': ['strong', 'self'],\n    'emphasis': ['em', 'self'],\n    'style': ['span', 'self'],\n    'a': 'anchor',\n    'strikethrough': ['s', 'self'],\n    'sub': ['sub', 'self'],\n    'sup': ['sup', 'self'],\n    'code': ['code', 'self'],\n    'image': 'image',\n}\n\nconst TABLE = {\n    'tr': ['tr', ['align']],\n    'th': ['th', ['colspan', 'rowspan', 'align', 'valign']],\n    'td': ['td', ['colspan', 'rowspan', 'align', 'valign']],\n}\n\nconst POEM = {\n    'epigraph': ['blockquote'],\n    'subtitle': ['h2', STYLE],\n    'text-author': ['p', STYLE],\n    'date': ['p', STYLE],\n    'stanza': 'stanza',\n}\n\nconst SECTION = {\n    'title': ['header', {\n        'p': ['h1', STYLE],\n        'empty-line': ['br'],\n    }],\n    'epigraph': ['blockquote', 'self'],\n    'image': 'image',\n    'annotation': ['aside'],\n    'section': ['section', 'self'],\n    'p': ['p', STYLE],\n    'poem': ['blockquote', POEM],\n    'subtitle': ['h2', STYLE],\n    'cite': ['blockquote', 'self'],\n    'empty-line': ['br'],\n    'table': ['table', TABLE],\n    'text-author': ['p', STYLE],\n}\nPOEM['epigraph'].push(SECTION)\n\nconst BODY = {\n    'image': 'image',\n    'title': ['section', {\n        'p': ['h1', STYLE],\n        'empty-line': ['br'],\n    }],\n    'epigraph': ['section', SECTION],\n    'section': ['section', SECTION],\n}\n\nconst getImageSrc = el => {\n    const href = el.getAttributeNS(NS.XLINK, 'href')\n    const [, id] = href.split('#')\n    const bin = el.getRootNode().getElementById(id)\n    return bin\n        ? `data:${bin.getAttribute('content-type')};base64,${bin.textContent}`\n        : href\n}\n\nclass FB2Converter {\n    constructor(fb2) {\n        this.fb2 = fb2\n        this.doc = document.implementation.createDocument(NS.XHTML, 'html')\n    }\n    image(node) {\n        const el = this.doc.createElement('img')\n        el.alt = node.getAttribute('alt')\n        el.title = node.getAttribute('title')\n        el.setAttribute('src', getImageSrc(node))\n        return el\n    }\n    anchor(node) {\n        const el = this.convert(node, { 'a': ['a', STYLE] })\n        el.setAttribute('href', node.getAttributeNS(NS.XLINK, 'href'))\n        if (node.getAttribute('type') === 'note')\n            el.setAttributeNS(NS.EPUB, 'epub:type', 'noteref')\n        return el\n    }\n    stanza(node) {\n        const el = this.convert(node, {\n            'stanza': ['p', {\n                'title': ['header', {\n                    'p': ['strong', STYLE],\n                    'empty-line': ['br'],\n                }],\n                'subtitle': ['p', STYLE],\n            }],\n        })\n        for (const child of node.children) if (child.nodeName === 'v') {\n            el.append(this.doc.createTextNode(child.textContent))\n            el.append(this.doc.createElement('br'))\n        }\n        return el\n    }\n    convert(node, def) {\n        // not an element; return text content\n        if (node.nodeType === 3) return this.doc.createTextNode(node.textContent)\n        if (node.nodeType === 4) return this.doc.createCDATASection(node.textContent)\n        if (node.nodeType === 8) return this.doc.createComment(node.textContent)\n\n        const d = def?.[node.nodeName]\n        if (!d) return null\n        if (typeof d === 'string') return this[d](node)\n\n        const [name, opts] = d\n        const el = this.doc.createElement(name)\n\n        // copy the ID, and set class name from original element name\n        if (node.id) el.id = node.id\n        el.classList.add(node.nodeName)\n\n        // copy attributes\n        if (Array.isArray(opts)) for (const attr of opts)\n            el.setAttribute(attr, node.getAttribute(attr))\n\n        // process child elements recursively\n        const childDef = opts === 'self' ? def : Array.isArray(opts) ? null : opts\n        let child = node.firstChild\n        while (child) {\n            const childEl = this.convert(child, childDef)\n            if (childEl) el.append(childEl)\n            child = child.nextSibling\n        }\n        return el\n    }\n}\n\nconst parseXML = async blob => {\n    const buffer = await blob.arrayBuffer()\n    const str = new TextDecoder('utf-8').decode(buffer)\n    const parser = new DOMParser()\n    const doc = parser.parseFromString(str, MIME.XML)\n    const encoding = doc.xmlEncoding\n        // `Document.xmlEncoding` is deprecated, and already removed in Firefox\n        // so parse the XML declaration manually\n        || str.match(/^<\\?xml\\s+version\\s*=\\s*[\"']1.\\d+\"\\s+encoding\\s*=\\s*[\"']([A-Za-z0-9._-]*)[\"']/)?.[1]\n    if (encoding && encoding.toLowerCase() !== 'utf-8') {\n        const str = new TextDecoder(encoding).decode(buffer)\n        return parser.parseFromString(str, MIME.XML)\n    }\n    return doc\n}\n\nconst style = URL.createObjectURL(new Blob([`\n@namespace epub \"http://www.idpf.org/2007/ops\";\nbody > img, section > img {\n    display: block;\n    margin: auto;\n}\n.title h1 {\n    text-align: center;\n}\nbody > section > .title, body.notesBodyType > .title {\n    margin: 3em 0;\n}\nbody.notesBodyType > section .title h1 {\n    text-align: start;\n}\nbody.notesBodyType > section .title {\n    margin: 1em 0;\n}\np {\n    text-indent: 1em;\n    margin: 0;\n}\n:not(p) + p, p:first-child {\n    text-indent: 0;\n}\n.poem p {\n    text-indent: 0;\n    margin: 1em 0;\n}\n.text-author, .date {\n    text-align: end;\n}\n.text-author:before {\n    content: \"—\";\n}\ntable {\n    border-collapse: collapse;\n}\ntd, th {\n    padding: .25em;\n}\na[epub|type~=\"noteref\"] {\n    font-size: .75em;\n    vertical-align: super;\n}\nbody:not(.notesBodyType) > .title, body:not(.notesBodyType) > .epigraph {\n    margin: 3em 0;\n}\n`], { type: 'text/css' }))\n\nconst template = html => `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n    <head><link href=\"${style}\" rel=\"stylesheet\" type=\"text/css\"/></head>\n    <body>${html}</body>\n</html>`\n\n// name of custom ID attribute for TOC items\nconst dataID = 'data-foliate-id'\n\nexport const makeFB2 = async blob => {\n    const book = {}\n    const doc = await parseXML(blob)\n    const converter = new FB2Converter(doc)\n\n    const $ = x => doc.querySelector(x)\n    const $$ = x => [...doc.querySelectorAll(x)]\n    const getPerson = el => {\n        const nick = getElementText(el.querySelector('nickname'))\n        if (nick) return nick\n        const first = getElementText(el.querySelector('first-name'))\n        const middle = getElementText(el.querySelector('middle-name'))\n        const last = getElementText(el.querySelector('last-name'))\n        const name = [first, middle, last].filter(x => x).join(' ')\n        const sortAs = last\n            ? [last, [first, middle].filter(x => x).join(' ')].join(', ')\n            : null\n        return { name, sortAs }\n    }\n    const getDate = el => el?.getAttribute('value') ?? getElementText(el)\n    const annotation = $('title-info annotation')\n    book.metadata = {\n        title: getElementText($('title-info book-title')),\n        identifier: getElementText($('document-info id')),\n        language: getElementText($('title-info lang')),\n        author: $$('title-info author').map(getPerson),\n        translator: $$('title-info translator').map(getPerson),\n        producer: $$('document-info author').map(getPerson)\n            .concat($$('document-info program-used').map(getElementText)),\n        publisher: getElementText($('publish-info publisher')),\n        published: getDate($('title-info date')),\n        modified: getDate($('document-info date')),\n        description: annotation ? converter.convert(annotation,\n            { annotation: ['div', SECTION] }).innerHTML : null,\n        subject: $$('title-info genre').map(getElementText),\n    }\n    if ($('coverpage image')) {\n        const src = getImageSrc($('coverpage image'))\n        book.getCover = () => fetch(src).then(res => res.blob())\n    } else book.getCover = () => null\n\n    // get convert each body\n    const bodyData = Array.from(doc.querySelectorAll('body'), body => {\n        const converted = converter.convert(body, { body: ['body', BODY] })\n        return [Array.from(converted.children, el => {\n            // get list of IDs in the section\n            const ids = [el, ...el.querySelectorAll('[id]')].map(el => el.id)\n            return { el, ids }\n        }), converted]\n    })\n\n    const urls = []\n    const sectionData = bodyData[0][0]\n        // make a separate section for each section in the first body\n        .map(({ el, ids }) => {\n            // set up titles for TOC\n            const titles = Array.from(\n                el.querySelectorAll(':scope > section > .title'),\n                (el, index) => {\n                    el.setAttribute(dataID, index)\n                    return { title: getElementText(el), index }\n                })\n            return { ids, titles, el }\n        })\n        // for additional bodies, only make one section for each body\n        .concat(bodyData.slice(1).map(([sections, body]) => {\n            const ids = sections.map(s => s.ids).flat()\n            body.classList.add('notesBodyType')\n            return { ids, el: body, linear: 'no' }\n        }))\n        .map(({ ids, titles, el, linear }) => {\n            const str = template(el.outerHTML)\n            const blob = new Blob([str], { type: MIME.XHTML })\n            const url = URL.createObjectURL(blob)\n            urls.push(url)\n            const title = normalizeWhitespace(\n                el.querySelector('.title, .subtitle, p')?.textContent\n                ?? (el.classList.contains('title') ? el.textContent : ''))\n            return {\n                ids, title, titles, load: () => url,\n                createDocument: () => new DOMParser().parseFromString(str, MIME.XHTML),\n                // doo't count image data as it'd skew the size too much\n                size: blob.size - Array.from(el.querySelectorAll('[src]'),\n                    el => el.getAttribute('src')?.length ?? 0)\n                    .reduce((a, b) => a + b, 0),\n                linear,\n            }\n        })\n\n    const idMap = new Map()\n    book.sections = sectionData.map((section, index) => {\n        const { ids, load, createDocument, size, linear } = section\n        for (const id of ids) if (id) idMap.set(id, index)\n        return { id: index, load, createDocument, size, linear }\n    })\n\n    book.toc = sectionData.map(({ title, titles }, index) => {\n        const id = index.toString()\n        return {\n            label: title,\n            href: id,\n            subitems: titles?.length ? titles.map(({ title, index }) => ({\n                label: title,\n                href: `${id}#${index}`,\n            })) : null,\n        }\n    }).filter(item => item)\n\n    book.resolveHref = href => {\n        const [a, b] = href.split('#')\n        return a\n            // the link is from the TOC\n            ? { index: Number(a), anchor: doc => doc.querySelector(`[${dataID}=\"${b}\"]`) }\n            // link from within the page\n            : { index: idMap.get(b), anchor: doc => doc.getElementById(b) }\n    }\n    book.splitTOCHref = href => href?.split('#')?.map(x => Number(x)) ?? []\n    book.getTOCFragment = (doc, id) => doc.querySelector(`[${dataID}=\"${id}\"]`)\n\n    book.destroy = () => {\n        for (const url of urls) URL.revokeObjectURL(url)\n    }\n    return book\n}\n"],"names":["normalizeWhitespace","str","replace","getElementText","el","textContent","NS","XLINK","EPUB","MIME","STYLE","POEM","SECTION","push","BODY","getImageSrc","href","getAttributeNS","id","split","bin","getRootNode","getElementById","concat","getAttribute","FB2Converter","constructor","fb2","this","doc","document","implementation","createDocument","XHTML","image","node","createElement","alt","title","setAttribute","anchor","convert","setAttributeNS","stanza","child","children","nodeName","append","createTextNode","def","nodeType","createCDATASection","createComment","d","name","opts","classList","add","Array","isArray","attr","childDef","firstChild","childEl","nextSibling","style","URL","createObjectURL","Blob","type","dataID","makeFB2","async","book","_str$match","buffer","blob","arrayBuffer","TextDecoder","decode","parser","DOMParser","parseFromString","encoding","xmlEncoding","match","toLowerCase","parseXML","converter","$","x","querySelector","$$","querySelectorAll","getPerson","nick","first","middle","last","filter","join","sortAs","getDate","_el$getAttribute","annotation","metadata","identifier","language","author","map","translator","producer","publisher","published","modified","description","innerHTML","subject","src","getCover","fetch","then","res","bodyData","from","body","converted","ids","urls","sectionData","_ref","titles","index","slice","_ref2","sections","s","flat","linear","_ref3","_el$querySelector$tex","_el$querySelector","html","outerHTML","url","contains","load","size","_el$getAttribute$leng","_el$getAttribute2","length","reduce","a","b","idMap","Map","section","set","toc","_ref4","toString","label","subitems","_ref5","item","resolveHref","Number","get","splitTOCHref","_href$split$map","_href$split","getTOCFragment","destroy","revokeObjectURL"],"sourceRoot":""}